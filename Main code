import cProfile
import tkinter as tk
from tkinter import Message, Text
import cv2
import os
import shutil
import csv
import numpy as np
from PIL import Image, ImageTk
import pandas as pd
import datetime
import time
import tkinter.ttk as ttk
import tkinter.font as font
from urllib.request import urlopen
from ssl import SSLContext, PROTOCOL_TLSv1
import threading
import queue
frame_queue = queue.Queue(maxsize=5)  # Buffer size of 5 frames
window = tk.Tk()
window.title("Face_Recogniser attendance system")
dialog_title = 'QUIT'
window.geometry('1366x768')
window.configure()  # background='grey')
window.grid_rowconfigure(0, weight=1)
window.grid_columnconfigure(0, weight=1)
path = "im0.jpg"
path2 = "im1.jpg"
img = ImageTk.PhotoImage(Image.open(path))
img2 = ImageTk.PhotoImage(Image.open(path2))
panel = tk.Label(window, image=img)
panel2 = tk.Label(window, image=img2)
panel.pack(side="left", fill="x", expand="no")
panel2.pack(side="left", fill="x", expand="no")
message = tk.Label(window, text="Face-Recognition-Attendance-System", bg="grey",
                   fg="black", width=50, height=3, font=('arial', 30, 'italic bold underline'))
message.place(x=80, y=20)
lbl = tk.Label(window, text="EMP ID", width=20, height=2,
               fg="white", bg="green", font=('times', 15, ' bold '))
lbl.place(x=400, y=200)
txt = tk.Entry(window, width=20, bg="green",
               fg="white", font=('times', 15, ' bold '))
txt.place(x=700, y=215)
lbl2 = tk.Label(window, text="Employee Name", width=20, fg="white",
                bg="green", height=2, font=('times', 15, ' bold '))
lbl2.place(x=400, y=300)
txt2 = tk.Entry(window, width=20, bg="green",
                fg="white", font=('times', 15, ' bold '))
txt2.place(x=700, y=315)
lbl3 = tk.Label(window, text="Notification : ", width=20, fg="white",
                bg="green", height=2, font=('times', 15, ' bold underline '))
lbl3.place(x=400, y=400)
message = tk.Label(window, text="", bg="green", fg="white", width=30,
                   height=2, activebackground="yellow", font=('times', 15, ' bold '))
message.place(x=700, y=400)
lbl3 = tk.Label(window, text="Attendance : ", width=20, fg="white",
                bg="green", height=2, font=('times', 15, ' bold  underline'))
lbl3.place(x=400, y=600)
message2 = tk.Label(window, text="", fg="white", bg="green",
                    activeforeground="green", width=30, height=2, font=('times', 15, ' bold '))
message2.place(x=700, y=600)

def clear():
    txt.delete(0, 'end')
    res = ""
    message.configure(text=res)

def clear2():
    txt2.delete(0, 'end')
    res = ""
    message.configure(text=res)

def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        pass
    try:
        import unicodedata
        unicodedata.numeric(s)
        return True
    except (TypeError, ValueError):
        pass
    return False

def video_reader(cam):
    """Threaded function to continuously read frames from the camera."""
    while True:
        ret, frame = cam.read()
        if not ret:
            break
        if not frame_queue.full():
            frame_queue.put(frame)  # Put frame into the queue
        time.sleep(0.01)  # Small delay to prevent CPU overutilization

def TakeImages():
    Id = txt.get()
    name = txt2.get()
    if is_number(Id) and name.isalpha():
        cam = cv2.VideoCapture(0)
        detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")
        sampleNum = 0
        
        # Start video reading thread
        threading.Thread(target=video_reader, args=(cam,), daemon=True).start()

        while True:
            if not frame_queue.empty():
                img = frame_queue.get()  # Retrieve frame from queue
                gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                faces = detector.detectMultiScale(gray, 1.3, 5)
                
                for (x, y, w, h) in faces:
                    cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)
                    sampleNum += 1
                    cv2.imwrite(f"TrainingImage/{name}.{Id}.{sampleNum}.jpg", gray[y:y+h, x:x+w])
                    cv2.imshow('frame', img)
                
                if cv2.waitKey(1) & 0xFF == ord('q') or sampleNum > 100:
                    break
        
        cam.release()
        cv2.destroyAllWindows()
        res = f"Images Saved for ID : {Id} Name : {name}"
        with open('EmployeeDetails/EmployeeDetails.csv', 'a+') as csvFile:
            writer = csv.writer(csvFile)
            writer.writerow([Id, name])
        message.configure(text=res)
    else:
        message.configure(text="Invalid ID or Name")

def profile_TakeImages():
    profiler = cProfile.Profile()
    profiler.enable()
    TakeImages()
    profiler.disable()
    profiler.print_stats(sort='time')

def TrainImages():
    if not os.path.exists("TrainingImageLabel"):
        os.makedirs("TrainingImageLabel")
    recognizer = cv2.face.LBPHFaceRecognizer_create()
    harcascadePath = "haarcascade_frontalface_default.xml"
    detector = cv2.CascadeClassifier(harcascadePath)
    faces, Id = getImagesAndLabels("TrainingImage")
    if faces:
        recognizer.train(faces, np.array(Id))
        recognizer.save("TrainingImageLabel/Trainner.yml")
        res = "Images trained successfully"
    else:
        res = "No images found for training!"
    message.configure(text=res)

def profile_TrainImages():
    profiler = cProfile.Profile()
    profiler.enable()
    TrainImages()
    profiler.disable()
    profiler.print_stats(sort='time')

def getImagesAndLabels(path):
    """Optimized function to get images and labels for training."""
    imagePaths = [os.path.join(path, f) for f in os.listdir(path) if f.endswith('.jpg')]
    faces, Ids = [], []
    
    for imagePath in imagePaths:
        try:
            # Lazy load the image directly to numpy array
            with Image.open(imagePath) as pilImage:
                imageNp = np.array(pilImage.convert('L'), 'uint8')
            Id = int(os.path.split(imagePath)[-1].split(".")[1])
            faces.append(imageNp)
            Ids.append(Id)
        except Exception as e:
            print(f"Error loading {imagePath}: {e}")
    
    return faces, Ids

def TrackImages():
    recognizer = cv2.face.LBPHFaceRecognizer_create()
    recognizer.read("TrainingImageLabel\\Trainner.yml")
    harcascadePath = "haarcascade_frontalface_default.xml"
    faceCascade = cv2.CascadeClassifier(harcascadePath)
    df = pd.read_csv("EmployeeDetails\\EmployeeDetails.csv")
    cam = cv2.VideoCapture(0)
    font = cv2.FONT_HERSHEY_SIMPLEX
    col_names = ['Id', 'Name', 'Date', 'Time']
    attendance = pd.DataFrame(columns=col_names)
    unknown_count = 0  # Counter for saving unknown images efficiently

    # Frame skipping to reduce redundant computations
    frame_skip = 2  # Process every 2nd frame
    frame_count = 0

    while True:
        ret, im = cam.read()
        frame_count += 1
        if frame_count % frame_skip != 0:
            continue  # Skip processing for non-target frames

        gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
        faces = faceCascade.detectMultiScale(gray, 1.2, 5)

        for (x, y, w, h) in faces:
            face_crop = gray[y:y+h, x:x+w]  # Extract face region
            Id, conf = recognizer.predict(face_crop)
            ts = time.time()
            date = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
            timeStamp = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')
            if conf < 50:  # Recognized face
                name = df.loc[df['Id'] == Id]['Name'].values[0]
                tt = f"{Id}-{name}"
                if Id not in attendance['Id'].values:
                    attendance.loc[len(attendance)] = [Id, name, date, timeStamp]
            else:  # Unknown face
                Id = 'Unknown'
                tt = Id               
                if conf > 75:
                    unknown_count += 1
                    filename = f"ImagesUnknown\\Image_{unknown_count}.jpg"
                    cv2.imwrite(filename, im[y:y+h, x:x+w])
            # Draw rectangle and text
            cv2.rectangle(im, (x, y), (x+w, y+h), (225, 0, 0), 2)
            cv2.putText(im, str(tt), (x, y+h), font, 1, (255, 255, 255), 2)
        attendance = attendance.drop_duplicates(subset=['Id'], keep='first')
        cv2.imshow('im', im)
        if cv2.waitKey(1) == ord('q'):  # Exit loop on 'q'
            break
    date = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
    timeStamp = datetime.datetime.fromtimestamp(ts).strftime('%H-%M-%S')
    fileName = f"Attendance\\Attendance_{date}_{timeStamp}.csv"
    attendance.to_csv(fileName, index=False)
    cam.release()
    cv2.destroyAllWindows()
    res = attendance
    message2.configure(text=res)

def profile_TrackImages():
    profiler = cProfile.Profile()
    profiler.enable()
    TrackImages()
    profiler.disable()
    profiler.print_stats(sort='time')

def run_app():
    profiler = cProfile.Profile()
    profiler.enable()
    window.mainloop()
    profiler.disable()
    profiler.print_stats(sort='time')
    

clearButton = tk.Button(window, text="Clear", command=clear, fg="red", bg="yellow",
                        width=20, height=2, activebackground="Red", font=('times', 15, ' bold '))
clearButton.place(x=950, y=200)
clearButton2 = tk.Button(window, text="Clear", command=clear2, fg="red", bg="yellow",
                         width=20, height=2, activebackground="Red", font=('times', 15, ' bold '))
clearButton2.place(x=950, y=300)
takeImg = tk.Button(window, text="Take Images", command=profile_TakeImages, fg="red", bg="yellow",
                    width=20, height=3, activebackground="Red", font=('times', 15, ' bold '))
takeImg.place(x=200, y=500)
trainImg = tk.Button(window, text="Train Images", command=profile_TrainImages, fg="red",
                     bg="yellow", width=20, height=3, activebackground="Red", font=('times', 15, ' bold '))
trainImg.place(x=500, y=500)
trackImg = tk.Button(window, text="Track Images", command=profile_TrackImages, fg="red",
                     bg="yellow", width=20, height=3, activebackground="Red", font=('times', 15, ' bold '))
trackImg.place(x=800, y=500)
quitWindow = tk.Button(window, text="Quit", command=window.quit, fg="red", bg="yellow",
                       width=20, height=3, activebackground="Red", font=('times', 15, ' bold '))
quitWindow.place(x=1100, y=500)

profile_TakeImages()
profile_TrainImages()
profile_TrackImages()
run_app()


